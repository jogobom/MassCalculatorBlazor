@page "/"

@using MassCalculator.Data

@inject MassConverterService massConverterService

<h3>Calculate masses for charge states and isotopes</h3>

<p>
    Enter neutral monoisotopic mass:
    <input aria-label="Enter neutral monoisotopic mass" type="text" @bind="CompoundMass" style="margin-bottom: 15px" />
</p>

@if (compound == null)
{
    <p><em>Enter a mass to calculate all the charge states/isotopes</em></p>
}
else
{
    <h4>Positive ionisation</h4>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Charge state</th>
                <th>Monoisotopic mass</th>
                @for (var n = 1; n < compound.IsotopeCount; n++)
                {
                    <th>@($"Isotope {n}")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var chargeState in compound.ChargeStates)
            {
                <tr>
                    <td>@chargeState.Charge</td>
                    @foreach (var isotope in chargeState.Isotopes)
                    {
                        <td>@isotope.MassOverCharge</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <h4>Negative ionisation</h4>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Charge state</th>
                <th>Monoisotopic mass</th>
                @for (var n = 1; n < compound.IsotopeCount; n++)
                {
                    <th>@($"Isotope {n}")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var chargeState in compound.NegativeChargeStates)
            {
                <tr>
                    <td>@chargeState.Charge</td>
                    @foreach (var isotope in chargeState.Isotopes)
                    {
                        <td>@isotope.MassOverCharge</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Compound? compound;

    private double compoundMass;
    private double CompoundMass
    {
        get => compoundMass;
        set
        {
            compoundMass = value;
            compound = massConverterService.GenerateCompoundDetails(compoundMass).Result;
        }
    }
}
