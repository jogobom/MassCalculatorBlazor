@page "/ChargedToNeutral"

@using MassCalculator.Store.ChargedToNeutral
@using Fluxor

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<ChargedToNeutralState> ChargedToNeutralState

<h3>Calculate neutral mass from a charged m/z</h3>

<p>
    Enter m/z:
    <input aria-label="Enter mass over charge" type="text" @oninput="SetMassOverCharge" value="@ChargedToNeutralState.Value.MassOverCharge" style="margin-bottom: 15px" />
</p>

<p>
    Enter charge state:
    <input aria-label="Enter charge state" type="text" @oninput="SetCharge" value="@ChargedToNeutralState.Value.Charge" style="margin-bottom: 15px" />
</p>

@if (ChargedToNeutralState.Value.Compound == null)
{
    <p><em>Enter m/z and charge state to calculate the neutral mass and where all the other charge states and isotopes would be</em></p>
}
else
{
    <h4>Neutral mass</h4>

    <p>@ChargedToNeutralState.Value.Compound.NeutralMass</p>

    <h4>Positive ionisation</h4>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Charge state</th>
                <th>Monoisotopic mass</th>
                @for (var n = 1; n < ChargedToNeutralState.Value.Compound.IsotopeCount; n++)
                {
                    <th>@($"Isotope {n}")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var chargeState in ChargedToNeutralState.Value.Compound.ChargeStates)
            {
                <tr>
                    <td>@chargeState.Charge</td>
                    @foreach (var isotope in chargeState.Isotopes)
                    {
                        <td>@isotope.MassOverCharge</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <h4>Negative ionisation</h4>
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Charge state</th>
                <th>Monoisotopic mass</th>
                @for (var n = 1; n < ChargedToNeutralState.Value.Compound.IsotopeCount; n++)
                {
                    <th>@($"Isotope {n}")</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var chargeState in ChargedToNeutralState.Value.Compound.NegativeChargeStates)
            {
                <tr>
                    <td>@chargeState.Charge</td>
                    @foreach (var isotope in chargeState.Isotopes)
                    {
                        <td>@isotope.MassOverCharge</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private void SetMassOverCharge(ChangeEventArgs obj)
    {
        if (obj.Value != null && double.TryParse((string)obj.Value, out var value))
        {
            Dispatcher.Dispatch(new SetMassOverChargeAction(value));
        }
    }

    private void SetCharge(ChangeEventArgs obj)
    {
        if (obj.Value != null && int.TryParse((string)obj.Value, out var value))
        {
            Dispatcher.Dispatch(new SetChargeAction(value));
        }
    }
}
